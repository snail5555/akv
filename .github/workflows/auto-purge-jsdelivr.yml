name: Auto Purge JSDelivr for Updated Files

on:
  push:
    branches:
      - main
    paths:
      - "**"

jobs:
  purge-jsdelivr:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 2 # Ch·ªâ c·∫ßn 2 commits ƒë·ªÉ so s√°nh

      - name: Get list of updated files
        id: changed-files
        run: |
          # L·∫•y danh s√°ch files thay ƒë·ªïi
          if [ "${{ github.event.before }}" != "0000000000000000000000000000000000000000" ]; then
            files=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep -E '\.(png|jpg|jpeg|webp|gif|svg|js|css|json|ico|woff|woff2|ttf)$' || true)
          else
            # Tr∆∞·ªùng h·ª£p push ƒë·∫ßu ti√™n
            files=$(git diff --name-only HEAD~1 HEAD | grep -E '\.(png|jpg|jpeg|webp|gif|svg|js|css|json|ico|woff|woff2|ttf)$' || true)
          fi

          echo "Changed files:"
          echo "$files"

          if [ -n "$files" ]; then
            # T·∫°o array JSON
            files_array=$(echo "$files" | jq -R -s -c 'split("\n") | map(select(length > 0))')
            echo "files_json=$files_array" >> $GITHUB_OUTPUT
            echo "has_files=true" >> $GITHUB_OUTPUT
          else
            echo "files_json=[]" >> $GITHUB_OUTPUT
            echo "has_files=false" >> $GITHUB_OUTPUT
          fi

      - name: Purge files from JSDelivr CDN
        if: steps.changed-files.outputs.has_files == 'true'
        run: |
          echo "Starting JSDelivr purge process..."
          files='${{ steps.changed-files.outputs.files_json }}'

          echo "$files" | jq -r '.[]' | while IFS= read -r file; do
            if [ -n "$file" ]; then
              # URL encode file path n·∫øu c·∫ßn
              encoded_file=$(echo "$file" | sed 's/ /%20/g')
              purge_url="https://purge.jsdelivr.net/gh/${{ github.repository }}@main/$encoded_file"
              
              echo "üîÑ Purging: $file"
              echo "üì° URL: $purge_url"
              
              # G·ª≠i request purge v·ªõi retry
              for attempt in 1 2 3; do
                response=$(curl -s -w "\n%{http_code}" -X POST "$purge_url" || echo -e "\nERROR")
                http_code=$(echo "$response" | tail -n1)
                response_body=$(echo "$response" | head -n -1)
                
                if [ "$http_code" = "200" ] || [ "$http_code" = "202" ]; then
                  echo "‚úÖ Success: $file (HTTP $http_code)"
                  echo "üìù Response: $response_body"
                  break
                else
                  echo "‚ùå Failed attempt $attempt: $file (HTTP $http_code)"
                  echo "üìù Response: $response_body"
                  if [ $attempt -lt 3 ]; then
                    echo "‚è≥ Retrying in 2 seconds..."
                    sleep 2
                  fi
                fi
              done
              
              # Th√™m delay gi·ªØa c√°c request
              sleep 1
            fi
          done

          echo "üéâ Purge process completed!"

      - name: Verify purge (optional)
        if: steps.changed-files.outputs.has_files == 'true'
        run: |
          echo "‚è≥ Waiting 10 seconds for CDN to update..."
          sleep 10

          files='${{ steps.changed-files.outputs.files_json }}'
          echo "$files" | jq -r '.[]' | head -3 | while IFS= read -r file; do
            if [ -n "$file" ]; then
              cdn_url="https://cdn.jsdelivr.net/gh/${{ github.repository }}@main/$file"
              echo "üîç Checking: $cdn_url"
              
              response=$(curl -s -I "$cdn_url" || echo "ERROR")
              if echo "$response" | grep -q "200 OK"; then
                echo "‚úÖ File accessible on CDN: $file"
              else
                echo "‚ö†Ô∏è File may still be updating: $file"
              fi
            fi
          done
